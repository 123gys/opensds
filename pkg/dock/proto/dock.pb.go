// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dock.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	dock.proto

It has these top-level messages:
	DockRequest
	DockResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// The DockRequest message containing all properties of
// a request to dock service.
type DockRequest struct {
	VolumeId              string `protobuf:"bytes,1,opt,name=volumeId" json:"volumeId,omitempty"`
	VolumeName            string `protobuf:"bytes,2,opt,name=volumeName" json:"volumeName,omitempty"`
	VolumeDescription     string `protobuf:"bytes,3,opt,name=volumeDescription" json:"volumeDescription,omitempty"`
	VolumeSize            int64  `protobuf:"varint,4,opt,name=volumeSize" json:"volumeSize,omitempty"`
	AttachmentId          string `protobuf:"bytes,5,opt,name=attachmentId" json:"attachmentId,omitempty"`
	AttachmentName        string `protobuf:"bytes,6,opt,name=attachmentName" json:"attachmentName,omitempty"`
	AttachmentDescription string `protobuf:"bytes,7,opt,name=attachmentDescription" json:"attachmentDescription,omitempty"`
	DoLocalAttach         bool   `protobuf:"varint,8,opt,name=doLocalAttach" json:"doLocalAttach,omitempty"`
	MultiPath             bool   `protobuf:"varint,9,opt,name=multiPath" json:"multiPath,omitempty"`
	HostInfo              string `protobuf:"bytes,10,opt,name=hostInfo" json:"hostInfo,omitempty"`
	Mountpoint            string `protobuf:"bytes,11,opt,name=mountpoint" json:"mountpoint,omitempty"`
	SnapshotId            string `protobuf:"bytes,12,opt,name=snapshotId" json:"snapshotId,omitempty"`
	SnapshotName          string `protobuf:"bytes,13,opt,name=snapshotName" json:"snapshotName,omitempty"`
	SnapshotDescription   string `protobuf:"bytes,14,opt,name=snapshotDescription" json:"snapshotDescription,omitempty"`
	DockInfo              string `protobuf:"bytes,15,opt,name=dockInfo" json:"dockInfo,omitempty"`
	PoolId                string `protobuf:"bytes,16,opt,name=poolId" json:"poolId,omitempty"`
	ProfileId             string `protobuf:"bytes,17,opt,name=profileId" json:"profileId,omitempty"`
}

func (m *DockRequest) Reset()                    { *m = DockRequest{} }
func (m *DockRequest) String() string            { return proto1.CompactTextString(m) }
func (*DockRequest) ProtoMessage()               {}
func (*DockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DockRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *DockRequest) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

func (m *DockRequest) GetVolumeDescription() string {
	if m != nil {
		return m.VolumeDescription
	}
	return ""
}

func (m *DockRequest) GetVolumeSize() int64 {
	if m != nil {
		return m.VolumeSize
	}
	return 0
}

func (m *DockRequest) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *DockRequest) GetAttachmentName() string {
	if m != nil {
		return m.AttachmentName
	}
	return ""
}

func (m *DockRequest) GetAttachmentDescription() string {
	if m != nil {
		return m.AttachmentDescription
	}
	return ""
}

func (m *DockRequest) GetDoLocalAttach() bool {
	if m != nil {
		return m.DoLocalAttach
	}
	return false
}

func (m *DockRequest) GetMultiPath() bool {
	if m != nil {
		return m.MultiPath
	}
	return false
}

func (m *DockRequest) GetHostInfo() string {
	if m != nil {
		return m.HostInfo
	}
	return ""
}

func (m *DockRequest) GetMountpoint() string {
	if m != nil {
		return m.Mountpoint
	}
	return ""
}

func (m *DockRequest) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *DockRequest) GetSnapshotName() string {
	if m != nil {
		return m.SnapshotName
	}
	return ""
}

func (m *DockRequest) GetSnapshotDescription() string {
	if m != nil {
		return m.SnapshotDescription
	}
	return ""
}

func (m *DockRequest) GetDockInfo() string {
	if m != nil {
		return m.DockInfo
	}
	return ""
}

func (m *DockRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *DockRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

// The DockResponse message containing all properties of
// resource response from dock service.
type DockResponse struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *DockResponse) Reset()                    { *m = DockResponse{} }
func (m *DockResponse) String() string            { return proto1.CompactTextString(m) }
func (*DockResponse) ProtoMessage()               {}
func (*DockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DockResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DockResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DockResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto1.RegisterType((*DockRequest)(nil), "proto.DockRequest")
	proto1.RegisterType((*DockResponse)(nil), "proto.DockResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dock service

type DockClient interface {
	// Create a volume
	CreateVolume(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Get a volume
	GetVolume(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Delete a volume
	DeleteVolume(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Create a volume attachment
	CreateVolumeAttachment(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Update a volume attachment
	UpdateVolumeAttachment(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Get a volume snapshot
	GetVolumeSnapshot(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error)
}

type dockClient struct {
	cc *grpc.ClientConn
}

func NewDockClient(cc *grpc.ClientConn) DockClient {
	return &dockClient{cc}
}

func (c *dockClient) CreateVolume(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetVolume(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/GetVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolume(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) CreateVolumeAttachment(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/CreateVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) UpdateVolumeAttachment(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/UpdateVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolumeAttachment(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/DeleteVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) CreateVolumeSnapshot(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/CreateVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetVolumeSnapshot(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/GetVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolumeSnapshot(ctx context.Context, in *DockRequest, opts ...grpc.CallOption) (*DockResponse, error) {
	out := new(DockResponse)
	err := grpc.Invoke(ctx, "/proto.Dock/DeleteVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dock service

type DockServer interface {
	// Create a volume
	CreateVolume(context.Context, *DockRequest) (*DockResponse, error)
	// Get a volume
	GetVolume(context.Context, *DockRequest) (*DockResponse, error)
	// Delete a volume
	DeleteVolume(context.Context, *DockRequest) (*DockResponse, error)
	// Create a volume attachment
	CreateVolumeAttachment(context.Context, *DockRequest) (*DockResponse, error)
	// Update a volume attachment
	UpdateVolumeAttachment(context.Context, *DockRequest) (*DockResponse, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(context.Context, *DockRequest) (*DockResponse, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(context.Context, *DockRequest) (*DockResponse, error)
	// Get a volume snapshot
	GetVolumeSnapshot(context.Context, *DockRequest) (*DockResponse, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(context.Context, *DockRequest) (*DockResponse, error)
}

func RegisterDockServer(s *grpc.Server, srv DockServer) {
	s.RegisterService(&_Dock_serviceDesc, srv)
}

func _Dock_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolume(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetVolume(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolume(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_CreateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/CreateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolumeAttachment(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_UpdateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).UpdateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/UpdateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).UpdateVolumeAttachment(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/DeleteVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolumeAttachment(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_CreateVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/CreateVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolumeSnapshot(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/GetVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetVolumeSnapshot(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dock/DeleteVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolumeSnapshot(ctx, req.(*DockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dock",
	HandlerType: (*DockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Dock_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _Dock_GetVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Dock_DeleteVolume_Handler,
		},
		{
			MethodName: "CreateVolumeAttachment",
			Handler:    _Dock_CreateVolumeAttachment_Handler,
		},
		{
			MethodName: "UpdateVolumeAttachment",
			Handler:    _Dock_UpdateVolumeAttachment_Handler,
		},
		{
			MethodName: "DeleteVolumeAttachment",
			Handler:    _Dock_DeleteVolumeAttachment_Handler,
		},
		{
			MethodName: "CreateVolumeSnapshot",
			Handler:    _Dock_CreateVolumeSnapshot_Handler,
		},
		{
			MethodName: "GetVolumeSnapshot",
			Handler:    _Dock_GetVolumeSnapshot_Handler,
		},
		{
			MethodName: "DeleteVolumeSnapshot",
			Handler:    _Dock_DeleteVolumeSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dock.proto",
}

func init() { proto1.RegisterFile("dock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0x35, 0x36, 0x49, 0x93, 0xdb, 0x6d, 0x35, 0xb7, 0xb1, 0x0c, 0x45, 0x24, 0x04, 0x91, 0x3c,
	0x48, 0x11, 0x15, 0xa1, 0x2f, 0x42, 0x68, 0x40, 0x02, 0x22, 0x92, 0x62, 0xdf, 0xc7, 0xdd, 0xa9,
	0x59, 0xba, 0xbb, 0x77, 0xdc, 0x99, 0xf5, 0xc1, 0x3f, 0xf4, 0x33, 0xfc, 0x13, 0x99, 0x3b, 0xbb,
	0xd9, 0x89, 0xf6, 0x25, 0xf1, 0x29, 0x39, 0xe7, 0xdc, 0x39, 0xb9, 0xf7, 0xe4, 0x00, 0x24, 0x14,
	0xdf, 0x5d, 0xe8, 0x92, 0x2c, 0x61, 0x8f, 0x3f, 0xa6, 0xbf, 0xbb, 0x70, 0xb4, 0xa0, 0xf8, 0x6e,
	0xa5, 0xbe, 0x57, 0xca, 0x58, 0x3c, 0x87, 0xc1, 0x0f, 0xca, 0xaa, 0x5c, 0x2d, 0x13, 0xd1, 0x99,
	0x74, 0x66, 0xc3, 0xd5, 0x06, 0xe3, 0x33, 0x00, 0xff, 0xfd, 0x93, 0xcc, 0x95, 0x78, 0xc8, 0x6a,
	0xc0, 0xe0, 0x4b, 0x18, 0x79, 0xb4, 0x50, 0x26, 0x2e, 0x53, 0x6d, 0x53, 0x2a, 0xc4, 0x01, 0x8f,
	0xfd, 0x2b, 0xb4, 0x6e, 0xd7, 0xe9, 0x4f, 0x25, 0xba, 0x93, 0xce, 0xec, 0x60, 0x15, 0x30, 0x38,
	0x85, 0x48, 0x5a, 0x2b, 0xe3, 0x75, 0xae, 0x0a, 0xbb, 0x4c, 0x44, 0x8f, 0x8d, 0xb6, 0x38, 0x7c,
	0x01, 0x27, 0x2d, 0xe6, 0xad, 0xfa, 0x3c, 0xf5, 0x17, 0x8b, 0x6f, 0xe1, 0x49, 0xcb, 0x84, 0xdb,
	0x1d, 0xf2, 0xf8, 0xfd, 0x22, 0x3e, 0x87, 0xe3, 0x84, 0x3e, 0x52, 0x2c, 0xb3, 0x39, 0xeb, 0x62,
	0x30, 0xe9, 0xcc, 0x06, 0xab, 0x6d, 0x12, 0x9f, 0xc2, 0x30, 0xaf, 0x32, 0x9b, 0x7e, 0x96, 0x76,
	0x2d, 0x86, 0x3c, 0xd1, 0x12, 0x2e, 0xcf, 0x35, 0x19, 0xbb, 0x2c, 0x6e, 0x49, 0x80, 0xcf, 0xb3,
	0xc1, 0x2e, 0x81, 0x9c, 0xaa, 0xc2, 0x6a, 0x4a, 0x0b, 0x2b, 0x8e, 0x7c, 0x9e, 0x2d, 0xe3, 0x74,
	0x53, 0x48, 0x6d, 0xd6, 0xe4, 0xee, 0x8f, 0xbc, 0xde, 0x32, 0x2e, 0xa1, 0x06, 0xf1, 0xed, 0xc7,
	0x3e, 0xa1, 0x90, 0xc3, 0x57, 0x70, 0xda, 0xe0, 0xf0, 0xee, 0x13, 0x1e, 0xbd, 0x4f, 0x72, 0x1b,
	0xbb, 0x9a, 0xf0, 0xc6, 0x8f, 0xfc, 0xc6, 0x0d, 0xc6, 0x33, 0xe8, 0x6b, 0xa2, 0x6c, 0x99, 0x88,
	0xc7, 0xac, 0xd4, 0xc8, 0x65, 0xa0, 0x4b, 0xba, 0x4d, 0x33, 0x57, 0x9b, 0x11, 0x4b, 0x2d, 0x31,
	0xbd, 0x81, 0xc8, 0x57, 0xcc, 0x68, 0x2a, 0x8c, 0x72, 0x2e, 0xc6, 0x4a, 0x5b, 0x99, 0xba, 0x61,
	0x35, 0x42, 0x01, 0x87, 0xb9, 0x32, 0x46, 0x7e, 0x6b, 0xca, 0xd5, 0x40, 0x1c, 0x43, 0x4f, 0x95,
	0x25, 0x95, 0x75, 0x9b, 0x3c, 0x78, 0xfd, 0xab, 0x0b, 0x5d, 0x67, 0x8c, 0x97, 0x10, 0x5d, 0x95,
	0x4a, 0x5a, 0x75, 0xc3, 0xf5, 0x41, 0xf4, 0x1d, 0xbf, 0x08, 0x8a, 0x7d, 0x7e, 0xba, 0xc5, 0xf9,
	0x4d, 0xa6, 0x0f, 0xf0, 0x1d, 0x0c, 0x3f, 0x28, 0xbb, 0xfb, 0xbb, 0x4b, 0x88, 0x16, 0x2a, 0x53,
	0xfb, 0xfc, 0xe4, 0x15, 0x9c, 0x85, 0xdb, 0xce, 0x37, 0xdd, 0xdb, 0xd1, 0xe4, 0x8b, 0x4e, 0xfe,
	0xdf, 0x24, 0x3c, 0x62, 0x3f, 0x93, 0x39, 0x8c, 0xc3, 0x73, 0xae, 0xeb, 0x4a, 0xed, 0x62, 0xf1,
	0x1e, 0x46, 0x9b, 0x3f, 0x61, 0x9f, 0xf7, 0x73, 0x18, 0x87, 0x77, 0xec, 0x61, 0xf1, 0xb5, 0xcf,
	0xec, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xfb, 0xe4, 0x25, 0x23, 0x05, 0x00, 0x00,
}
