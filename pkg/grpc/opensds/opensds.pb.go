// Code generated by protoc-gen-go.
// source: opensds.proto
// DO NOT EDIT!

/*
Package opensds is a generated protocol buffer package.

It is generated from these files:
	opensds.proto

It has these top-level messages:
	VolumeRequest
	ShareRequest
	Response
*/
package opensds

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The VolumeRequest message containing all properties of
// a volume request.
type VolumeRequest struct {
	ResourceType    string `protobuf:"bytes,1,opt,name=resourceType" json:"resourceType,omitempty"`
	Id              string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	VolumeType      string `protobuf:"bytes,4,opt,name=volumeType" json:"volumeType,omitempty"`
	Size            int32  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	AllowDetails    bool   `protobuf:"varint,6,opt,name=allowDetails" json:"allowDetails,omitempty"`
	Device          string `protobuf:"bytes,7,opt,name=device" json:"device,omitempty"`
	MountDir        string `protobuf:"bytes,8,opt,name=mountDir" json:"mountDir,omitempty"`
	FsType          string `protobuf:"bytes,9,opt,name=fsType" json:"fsType,omitempty"`
	DockId          string `protobuf:"bytes,10,opt,name=dockId" json:"dockId,omitempty"`
	SnapshotId      string `protobuf:"bytes,11,opt,name=snapshotId" json:"snapshotId,omitempty"`
	SnapshotName    string `protobuf:"bytes,12,opt,name=snapshotName" json:"snapshotName,omitempty"`
	Description     string `protobuf:"bytes,13,opt,name=description" json:"description,omitempty"`
	ForceSnapshoted bool   `protobuf:"varint,14,opt,name=forceSnapshoted" json:"forceSnapshoted,omitempty"`
	StorageProfile  string `protobuf:"bytes,15,opt,name=storageProfile" json:"storageProfile,omitempty"`
}

func (m *VolumeRequest) Reset()                    { *m = VolumeRequest{} }
func (m *VolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeRequest) ProtoMessage()               {}
func (*VolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VolumeRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *VolumeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeRequest) GetVolumeType() string {
	if m != nil {
		return m.VolumeType
	}
	return ""
}

func (m *VolumeRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *VolumeRequest) GetAllowDetails() bool {
	if m != nil {
		return m.AllowDetails
	}
	return false
}

func (m *VolumeRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *VolumeRequest) GetMountDir() string {
	if m != nil {
		return m.MountDir
	}
	return ""
}

func (m *VolumeRequest) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *VolumeRequest) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *VolumeRequest) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *VolumeRequest) GetSnapshotName() string {
	if m != nil {
		return m.SnapshotName
	}
	return ""
}

func (m *VolumeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VolumeRequest) GetForceSnapshoted() bool {
	if m != nil {
		return m.ForceSnapshoted
	}
	return false
}

func (m *VolumeRequest) GetStorageProfile() string {
	if m != nil {
		return m.StorageProfile
	}
	return ""
}

// The ShareRequest message containing all properties of
// a share request.
type ShareRequest struct {
	ResourceType   string `protobuf:"bytes,1,opt,name=resourceType" json:"resourceType,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Size           int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	ShareType      string `protobuf:"bytes,5,opt,name=shareType" json:"shareType,omitempty"`
	ShareProto     string `protobuf:"bytes,6,opt,name=shareProto" json:"shareProto,omitempty"`
	AllowDetails   bool   `protobuf:"varint,7,opt,name=allowDetails" json:"allowDetails,omitempty"`
	Device         string `protobuf:"bytes,8,opt,name=device" json:"device,omitempty"`
	MountDir       string `protobuf:"bytes,9,opt,name=mountDir" json:"mountDir,omitempty"`
	FsType         string `protobuf:"bytes,10,opt,name=fsType" json:"fsType,omitempty"`
	DockId         string `protobuf:"bytes,11,opt,name=dockId" json:"dockId,omitempty"`
	StorageProfile string `protobuf:"bytes,12,opt,name=storageProfile" json:"storageProfile,omitempty"`
}

func (m *ShareRequest) Reset()                    { *m = ShareRequest{} }
func (m *ShareRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareRequest) ProtoMessage()               {}
func (*ShareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShareRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ShareRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShareRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShareRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ShareRequest) GetShareType() string {
	if m != nil {
		return m.ShareType
	}
	return ""
}

func (m *ShareRequest) GetShareProto() string {
	if m != nil {
		return m.ShareProto
	}
	return ""
}

func (m *ShareRequest) GetAllowDetails() bool {
	if m != nil {
		return m.AllowDetails
	}
	return false
}

func (m *ShareRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ShareRequest) GetMountDir() string {
	if m != nil {
		return m.MountDir
	}
	return ""
}

func (m *ShareRequest) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *ShareRequest) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *ShareRequest) GetStorageProfile() string {
	if m != nil {
		return m.StorageProfile
	}
	return ""
}

// The Response message containing all properties of
// resource response.
type Response struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*VolumeRequest)(nil), "opensds.VolumeRequest")
	proto.RegisterType((*ShareRequest)(nil), "opensds.ShareRequest")
	proto.RegisterType((*Response)(nil), "opensds.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// const _ = grpc.SupportPackageIsVersion4

// Client API for Orchestration service

type OrchestrationClient interface {
	// Create a volume
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a volume
	GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// List all volumes
	ListVolumes(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume
	DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Attach a volume
	AttachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Detach a volume
	DetachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Mount a volume
	MountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Unmount a volume
	UnmountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a volume snapshot
	GetVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// List all volume snapshots
	ListVolumeSnapshots(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a share
	CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a share
	GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// List all shares
	ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a share
	DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Attach a share
	AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Detach a share
	DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Mount a share
	MountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Unmount a share
	UnmountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
}

type orchestrationClient struct {
	cc *grpc.ClientConn
}

func NewOrchestrationClient(cc *grpc.ClientConn) OrchestrationClient {
	return &orchestrationClient{cc}
}

func (c *orchestrationClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/GetVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) ListVolumes(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/ListVolumes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) AttachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/AttachVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DetachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DetachVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) MountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/MountVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) UnmountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/UnmountVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/CreateVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) GetVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/GetVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) ListVolumeSnapshots(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/ListVolumeSnapshots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DeleteVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/CreateShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/GetShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/ListShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DeleteShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/AttachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DetachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) MountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/MountShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) UnmountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/UnmountShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orchestration service

type OrchestrationServer interface {
	// Create a volume
	CreateVolume(context.Context, *VolumeRequest) (*Response, error)
	// Get a volume
	GetVolume(context.Context, *VolumeRequest) (*Response, error)
	// List all volumes
	ListVolumes(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume
	DeleteVolume(context.Context, *VolumeRequest) (*Response, error)
	// Attach a volume
	AttachVolume(context.Context, *VolumeRequest) (*Response, error)
	// Detach a volume
	DetachVolume(context.Context, *VolumeRequest) (*Response, error)
	// Mount a volume
	MountVolume(context.Context, *VolumeRequest) (*Response, error)
	// Unmount a volume
	UnmountVolume(context.Context, *VolumeRequest) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Get a volume snapshot
	GetVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// List all volume snapshots
	ListVolumeSnapshots(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Create a share
	CreateShare(context.Context, *ShareRequest) (*Response, error)
	// Get a share
	GetShare(context.Context, *ShareRequest) (*Response, error)
	// List all shares
	ListShares(context.Context, *ShareRequest) (*Response, error)
	// Delete a share
	DeleteShare(context.Context, *ShareRequest) (*Response, error)
	// Attach a share
	AttachShare(context.Context, *ShareRequest) (*Response, error)
	// Detach a share
	DetachShare(context.Context, *ShareRequest) (*Response, error)
	// Mount a share
	MountShare(context.Context, *ShareRequest) (*Response, error)
	// Unmount a share
	UnmountShare(context.Context, *ShareRequest) (*Response, error)
}

func RegisterOrchestrationServer(s *grpc.Server, srv OrchestrationServer) {
	s.RegisterService(&_Orchestration_serviceDesc, srv)
}

func _Orchestration_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).GetVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).ListVolumes(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DeleteVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_AttachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).AttachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/AttachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).AttachVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DetachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DetachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DetachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DetachVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_MountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).MountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/MountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).MountVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_UnmountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).UnmountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/UnmountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).UnmountVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_CreateVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).CreateVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/CreateVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).CreateVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_GetVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).GetVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/GetVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).GetVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_ListVolumeSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).ListVolumeSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/ListVolumeSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).ListVolumeSnapshots(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DeleteVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DeleteVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DeleteVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DeleteVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).CreateShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).GetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).ListShares(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DeleteShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DeleteShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DeleteShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DeleteShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_AttachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).AttachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/AttachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).AttachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DetachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DetachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DetachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DetachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_MountShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).MountShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/MountShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).MountShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_UnmountShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).UnmountShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/UnmountShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).UnmountShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orchestration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opensds.Orchestration",
	HandlerType: (*OrchestrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Orchestration_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _Orchestration_GetVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _Orchestration_ListVolumes_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Orchestration_DeleteVolume_Handler,
		},
		{
			MethodName: "AttachVolume",
			Handler:    _Orchestration_AttachVolume_Handler,
		},
		{
			MethodName: "DetachVolume",
			Handler:    _Orchestration_DetachVolume_Handler,
		},
		{
			MethodName: "MountVolume",
			Handler:    _Orchestration_MountVolume_Handler,
		},
		{
			MethodName: "UnmountVolume",
			Handler:    _Orchestration_UnmountVolume_Handler,
		},
		{
			MethodName: "CreateVolumeSnapshot",
			Handler:    _Orchestration_CreateVolumeSnapshot_Handler,
		},
		{
			MethodName: "GetVolumeSnapshot",
			Handler:    _Orchestration_GetVolumeSnapshot_Handler,
		},
		{
			MethodName: "ListVolumeSnapshots",
			Handler:    _Orchestration_ListVolumeSnapshots_Handler,
		},
		{
			MethodName: "DeleteVolumeSnapshot",
			Handler:    _Orchestration_DeleteVolumeSnapshot_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _Orchestration_CreateShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _Orchestration_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _Orchestration_ListShares_Handler,
		},
		{
			MethodName: "DeleteShare",
			Handler:    _Orchestration_DeleteShare_Handler,
		},
		{
			MethodName: "AttachShare",
			Handler:    _Orchestration_AttachShare_Handler,
		},
		{
			MethodName: "DetachShare",
			Handler:    _Orchestration_DetachShare_Handler,
		},
		{
			MethodName: "MountShare",
			Handler:    _Orchestration_MountShare_Handler,
		},
		{
			MethodName: "UnmountShare",
			Handler:    _Orchestration_UnmountShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opensds.proto",
}

// Client API for Dock service

type DockClient interface {
	// Create a volume
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a volume
	GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// List all volumes
	ListVolumes(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume
	DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Attach a volume
	AttachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Detach a volume
	DetachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Mount a volume
	MountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Unmount a volume
	UnmountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a volume snapshot
	GetVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// List all volume snapshots
	ListVolumeSnapshots(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a share
	CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a share
	GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// List all shares
	ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a share
	DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Attach a share
	AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Detach a share
	DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Mount a share
	MountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Unmount a share
	UnmountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
}

type dockClient struct {
	cc *grpc.ClientConn
}

func NewDockClient(cc *grpc.ClientConn) DockClient {
	return &dockClient{cc}
}

func (c *dockClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/GetVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) ListVolumes(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/ListVolumes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) AttachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/AttachVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DetachVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DetachVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) MountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/MountVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) UnmountVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/UnmountVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/CreateVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/GetVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) ListVolumeSnapshots(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/ListVolumeSnapshots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DeleteVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/CreateShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/GetShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/ListShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DeleteShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/AttachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DetachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) MountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/MountShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) UnmountShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/UnmountShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dock service

type DockServer interface {
	// Create a volume
	CreateVolume(context.Context, *VolumeRequest) (*Response, error)
	// Get a volume
	GetVolume(context.Context, *VolumeRequest) (*Response, error)
	// List all volumes
	ListVolumes(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume
	DeleteVolume(context.Context, *VolumeRequest) (*Response, error)
	// Attach a volume
	AttachVolume(context.Context, *VolumeRequest) (*Response, error)
	// Detach a volume
	DetachVolume(context.Context, *VolumeRequest) (*Response, error)
	// Mount a volume
	MountVolume(context.Context, *VolumeRequest) (*Response, error)
	// Unmount a volume
	UnmountVolume(context.Context, *VolumeRequest) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Get a volume snapshot
	GetVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// List all volume snapshots
	ListVolumeSnapshots(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Create a share
	CreateShare(context.Context, *ShareRequest) (*Response, error)
	// Get a share
	GetShare(context.Context, *ShareRequest) (*Response, error)
	// List all shares
	ListShares(context.Context, *ShareRequest) (*Response, error)
	// Delete a share
	DeleteShare(context.Context, *ShareRequest) (*Response, error)
	// Attach a share
	AttachShare(context.Context, *ShareRequest) (*Response, error)
	// Detach a share
	DetachShare(context.Context, *ShareRequest) (*Response, error)
	// Mount a share
	MountShare(context.Context, *ShareRequest) (*Response, error)
	// Unmount a share
	UnmountShare(context.Context, *ShareRequest) (*Response, error)
}

func RegisterDockServer(s *grpc.Server, srv DockServer) {
	s.RegisterService(&_Dock_serviceDesc, srv)
}

func _Dock_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).ListVolumes(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_AttachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).AttachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/AttachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).AttachVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DetachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DetachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DetachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DetachVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_MountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).MountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/MountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).MountVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_UnmountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).UnmountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/UnmountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).UnmountVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_CreateVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/CreateVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/GetVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_ListVolumeSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).ListVolumeSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/ListVolumeSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).ListVolumeSnapshots(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DeleteVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).ListShares(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DeleteShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_AttachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).AttachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/AttachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).AttachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DetachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DetachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DetachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DetachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_MountShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).MountShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/MountShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).MountShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_UnmountShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).UnmountShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/UnmountShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).UnmountShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opensds.Dock",
	HandlerType: (*DockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Dock_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _Dock_GetVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _Dock_ListVolumes_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Dock_DeleteVolume_Handler,
		},
		{
			MethodName: "AttachVolume",
			Handler:    _Dock_AttachVolume_Handler,
		},
		{
			MethodName: "DetachVolume",
			Handler:    _Dock_DetachVolume_Handler,
		},
		{
			MethodName: "MountVolume",
			Handler:    _Dock_MountVolume_Handler,
		},
		{
			MethodName: "UnmountVolume",
			Handler:    _Dock_UnmountVolume_Handler,
		},
		{
			MethodName: "CreateVolumeSnapshot",
			Handler:    _Dock_CreateVolumeSnapshot_Handler,
		},
		{
			MethodName: "GetVolumeSnapshot",
			Handler:    _Dock_GetVolumeSnapshot_Handler,
		},
		{
			MethodName: "ListVolumeSnapshots",
			Handler:    _Dock_ListVolumeSnapshots_Handler,
		},
		{
			MethodName: "DeleteVolumeSnapshot",
			Handler:    _Dock_DeleteVolumeSnapshot_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _Dock_CreateShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _Dock_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _Dock_ListShares_Handler,
		},
		{
			MethodName: "DeleteShare",
			Handler:    _Dock_DeleteShare_Handler,
		},
		{
			MethodName: "AttachShare",
			Handler:    _Dock_AttachShare_Handler,
		},
		{
			MethodName: "DetachShare",
			Handler:    _Dock_DetachShare_Handler,
		},
		{
			MethodName: "MountShare",
			Handler:    _Dock_MountShare_Handler,
		},
		{
			MethodName: "UnmountShare",
			Handler:    _Dock_UnmountShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opensds.proto",
}

func init() { proto.RegisterFile("opensds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x57, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xa5, 0x6d, 0x3e, 0xec, 0x89, 0x93, 0xaa, 0x4b, 0xa9, 0x56, 0x15, 0x42, 0x55, 0x0e, 0xa8,
	0xa7, 0x1e, 0x8a, 0x84, 0x4a, 0xe1, 0x00, 0x34, 0x12, 0x42, 0xe2, 0xa3, 0x72, 0x81, 0xbb, 0xb1,
	0x27, 0xc4, 0xc2, 0xf1, 0x9a, 0xdd, 0x4d, 0x11, 0xfc, 0x45, 0x24, 0xae, 0xf0, 0x73, 0xd8, 0x1d,
	0xdb, 0x89, 0xd3, 0x36, 0x48, 0xb6, 0xb8, 0x20, 0xe5, 0xe6, 0x79, 0xb3, 0x6f, 0x76, 0x66, 0xde,
	0xec, 0x48, 0x86, 0xbe, 0xc8, 0x30, 0x55, 0x91, 0x3a, 0xca, 0xa4, 0xd0, 0x82, 0x75, 0x0b, 0x73,
	0xf8, 0x63, 0x0b, 0xfa, 0x1f, 0x44, 0x32, 0x9b, 0xa2, 0x8f, 0x5f, 0x66, 0xa8, 0x34, 0x1b, 0x82,
	0x27, 0x51, 0x89, 0x99, 0x0c, 0xf1, 0xdd, 0xb7, 0x0c, 0xf9, 0xc6, 0xc1, 0xc6, 0xa1, 0xeb, 0x2f,
	0x61, 0x6c, 0x00, 0x9b, 0x71, 0xc4, 0x37, 0xc9, 0x63, 0xbe, 0x18, 0x83, 0x56, 0x1a, 0x4c, 0x91,
	0x6f, 0x11, 0x42, 0xdf, 0xec, 0x1e, 0xc0, 0x25, 0x05, 0xa6, 0x28, 0x2d, 0xf2, 0x54, 0x10, 0xcb,
	0x51, 0xf1, 0x77, 0xe4, 0x6d, 0xe3, 0x69, 0xfb, 0xf4, 0x6d, 0xef, 0x0e, 0x92, 0x44, 0x7c, 0x1d,
	0xa1, 0x0e, 0xe2, 0x44, 0xf1, 0x8e, 0xf1, 0x39, 0xfe, 0x12, 0xc6, 0xf6, 0xa0, 0x13, 0xe1, 0x65,
	0x1c, 0x22, 0xef, 0x52, 0xcc, 0xc2, 0x62, 0xfb, 0xe0, 0x4c, 0xc5, 0x2c, 0xd5, 0xa3, 0x58, 0x72,
	0x87, 0x3c, 0x73, 0xdb, 0x72, 0xc6, 0x8a, 0xf2, 0x70, 0x73, 0x4e, 0x6e, 0x51, 0x2c, 0x11, 0x7e,
	0x7e, 0x19, 0x71, 0x28, 0x62, 0x91, 0x65, 0x73, 0x57, 0x69, 0x90, 0xa9, 0x89, 0xd0, 0xc6, 0xd7,
	0xcb, 0x73, 0x5f, 0x20, 0x36, 0xcf, 0xd2, 0x7a, 0x63, 0xeb, 0xf6, 0xf2, 0x1e, 0x55, 0x31, 0x76,
	0x00, 0xbd, 0x08, 0x55, 0x28, 0xe3, 0x4c, 0xc7, 0x22, 0xe5, 0x7d, 0x3a, 0x52, 0x85, 0xd8, 0x21,
	0x6c, 0x8f, 0x85, 0x69, 0xe9, 0x45, 0x41, 0xc3, 0x88, 0x0f, 0xa8, 0xe0, 0xab, 0x30, 0xbb, 0x0f,
	0x03, 0xa5, 0x85, 0x0c, 0x3e, 0xe1, 0xb9, 0x14, 0xe3, 0x38, 0x41, 0xbe, 0x4d, 0xe1, 0xae, 0xa0,
	0xc3, 0xdf, 0x9b, 0xe0, 0x5d, 0x4c, 0x02, 0xf9, 0xcf, 0xc5, 0x2c, 0xc5, 0x6a, 0x55, 0xc4, 0xba,
	0x0b, 0xae, 0xb2, 0x77, 0x51, 0xe0, 0x36, 0x1d, 0x5e, 0x00, 0xd4, 0x42, 0x6b, 0x9c, 0xdb, 0x79,
	0x23, 0x21, 0x6d, 0x0b, 0xe7, 0xc8, 0x35, 0xa9, 0xbb, 0x7f, 0x95, 0xda, 0x59, 0x29, 0xb5, 0xbb,
	0x52, 0x6a, 0x58, 0x21, 0x75, 0x6f, 0x49, 0xea, 0xeb, 0xad, 0xf5, 0x6e, 0x6c, 0xad, 0x0f, 0x8e,
	0x8f, 0x2a, 0x13, 0xa9, 0xa2, 0x58, 0x4a, 0x07, 0x7a, 0xa6, 0x8a, 0x7e, 0x16, 0x16, 0xe3, 0xd0,
	0x9d, 0xa2, 0x52, 0x86, 0x55, 0xb4, 0xb3, 0x34, 0xd9, 0x2e, 0xb4, 0x51, 0x4a, 0x21, 0x8b, 0xa6,
	0xe6, 0xc6, 0xf1, 0x2f, 0x17, 0xfa, 0x6f, 0x65, 0x38, 0x31, 0x4a, 0xc9, 0x80, 0x46, 0xe2, 0x31,
	0x78, 0x67, 0x12, 0x03, 0x8d, 0xf9, 0x9b, 0x64, 0x7b, 0x47, 0xe5, 0xbb, 0x5d, 0x7a, 0xa4, 0xfb,
	0x3b, 0x73, 0xbc, 0x4c, 0x6a, 0x78, 0x8b, 0x9d, 0x80, 0xfb, 0x02, 0x75, 0x13, 0xe6, 0x29, 0xf4,
	0x5e, 0xc5, 0xaa, 0xa0, 0xaa, 0x7a, 0x5c, 0x93, 0xf2, 0x08, 0x13, 0x6c, 0x96, 0xb2, 0x21, 0x3f,
	0xd3, 0x3a, 0x08, 0x27, 0x0d, 0xc9, 0x76, 0x52, 0x9a, 0x91, 0x4d, 0xc9, 0xaf, 0xed, 0xcc, 0x34,
	0xe1, 0x3e, 0x81, 0xfe, 0xfb, 0x74, 0xda, 0x94, 0x7d, 0x06, 0xbb, 0x55, 0x8d, 0xcb, 0x67, 0x5e,
	0x2f, 0xc8, 0x53, 0xd8, 0x99, 0x6b, 0xdd, 0x2c, 0xc2, 0x73, 0xb8, 0xbd, 0xd0, 0xbc, 0x0c, 0xa1,
	0x6a, 0x97, 0x52, 0xd5, 0xbe, 0x59, 0x22, 0x8f, 0xa0, 0x97, 0xf7, 0x83, 0x36, 0x17, 0xbb, 0x33,
	0x3f, 0x53, 0xdd, 0x64, 0x37, 0x53, 0x1f, 0x82, 0x63, 0xba, 0x50, 0x9f, 0x77, 0x02, 0x60, 0x6b,
	0xa7, 0x83, 0xaa, 0x16, 0xd3, 0x24, 0x9b, 0x57, 0x5c, 0xff, 0x52, 0x43, 0xcd, 0x67, 0xbd, 0x11,
	0x35, 0x9f, 0xf4, 0x46, 0xa5, 0xd2, 0x9c, 0xd7, 0x67, 0x9e, 0x82, 0x57, 0x4c, 0x79, 0x6d, 0xee,
	0xf1, 0x4f, 0x17, 0x5a, 0x23, 0xb3, 0x60, 0xd7, 0x0b, 0x6d, 0xbd, 0xd0, 0xd6, 0x0b, 0x6d, 0xbd,
	0xd0, 0xfe, 0xf7, 0x85, 0xf6, 0xb1, 0x43, 0xff, 0x4d, 0x0f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xd9, 0xb4, 0x3f, 0x6e, 0x48, 0x0d, 0x00, 0x00,
}
