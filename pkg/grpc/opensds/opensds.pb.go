// Code generated by protoc-gen-go.
// source: opensds.proto
// DO NOT EDIT!

/*
Package opensds is a generated protocol buffer package.

It is generated from these files:
	opensds.proto

It has these top-level messages:
	VolumeRequest
	ShareRequest
	Response
*/
package opensds

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The VolumeRequest message containing all properties of
// a volume request.
type VolumeRequest struct {
	VolumeId            string `protobuf:"bytes,1,opt,name=volumeId" json:"volumeId,omitempty"`
	VolumeName          string `protobuf:"bytes,2,opt,name=volumeName" json:"volumeName,omitempty"`
	Size                int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	DockInfo            string `protobuf:"bytes,4,opt,name=dockInfo" json:"dockInfo,omitempty"`
	PoolId              string `protobuf:"bytes,5,opt,name=poolId" json:"poolId,omitempty"`
	PoolName            string `protobuf:"bytes,6,opt,name=poolName" json:"poolName,omitempty"`
	AttachmentId        string `protobuf:"bytes,7,opt,name=attachmentId" json:"attachmentId,omitempty"`
	DoLocalAttach       bool   `protobuf:"varint,8,opt,name=doLocalAttach" json:"doLocalAttach,omitempty"`
	MultiPath           bool   `protobuf:"varint,9,opt,name=multiPath" json:"multiPath,omitempty"`
	HostInfo            string `protobuf:"bytes,10,opt,name=hostInfo" json:"hostInfo,omitempty"`
	Mountpoint          string `protobuf:"bytes,11,opt,name=mountpoint" json:"mountpoint,omitempty"`
	SnapshotId          string `protobuf:"bytes,12,opt,name=snapshotId" json:"snapshotId,omitempty"`
	SnapshotName        string `protobuf:"bytes,13,opt,name=snapshotName" json:"snapshotName,omitempty"`
	SnapshotDescription string `protobuf:"bytes,14,opt,name=snapshotDescription" json:"snapshotDescription,omitempty"`
	StorageProfile      string `protobuf:"bytes,15,opt,name=storageProfile" json:"storageProfile,omitempty"`
}

func (m *VolumeRequest) Reset()                    { *m = VolumeRequest{} }
func (m *VolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeRequest) ProtoMessage()               {}
func (*VolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *VolumeRequest) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

func (m *VolumeRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *VolumeRequest) GetDockInfo() string {
	if m != nil {
		return m.DockInfo
	}
	return ""
}

func (m *VolumeRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *VolumeRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *VolumeRequest) GetAttachmentId() string {
	if m != nil {
		return m.AttachmentId
	}
	return ""
}

func (m *VolumeRequest) GetDoLocalAttach() bool {
	if m != nil {
		return m.DoLocalAttach
	}
	return false
}

func (m *VolumeRequest) GetMultiPath() bool {
	if m != nil {
		return m.MultiPath
	}
	return false
}

func (m *VolumeRequest) GetHostInfo() string {
	if m != nil {
		return m.HostInfo
	}
	return ""
}

func (m *VolumeRequest) GetMountpoint() string {
	if m != nil {
		return m.Mountpoint
	}
	return ""
}

func (m *VolumeRequest) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *VolumeRequest) GetSnapshotName() string {
	if m != nil {
		return m.SnapshotName
	}
	return ""
}

func (m *VolumeRequest) GetSnapshotDescription() string {
	if m != nil {
		return m.SnapshotDescription
	}
	return ""
}

func (m *VolumeRequest) GetStorageProfile() string {
	if m != nil {
		return m.StorageProfile
	}
	return ""
}

// The ShareRequest message containing all properties of
// a share request.
type ShareRequest struct {
	ResourceType   string `protobuf:"bytes,1,opt,name=resourceType" json:"resourceType,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Size           int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	ShareType      string `protobuf:"bytes,5,opt,name=shareType" json:"shareType,omitempty"`
	ShareProto     string `protobuf:"bytes,6,opt,name=shareProto" json:"shareProto,omitempty"`
	AllowDetails   bool   `protobuf:"varint,7,opt,name=allowDetails" json:"allowDetails,omitempty"`
	Device         string `protobuf:"bytes,8,opt,name=device" json:"device,omitempty"`
	MountDir       string `protobuf:"bytes,9,opt,name=mountDir" json:"mountDir,omitempty"`
	FsType         string `protobuf:"bytes,10,opt,name=fsType" json:"fsType,omitempty"`
	DockId         string `protobuf:"bytes,11,opt,name=dockId" json:"dockId,omitempty"`
	StorageProfile string `protobuf:"bytes,12,opt,name=storageProfile" json:"storageProfile,omitempty"`
}

func (m *ShareRequest) Reset()                    { *m = ShareRequest{} }
func (m *ShareRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareRequest) ProtoMessage()               {}
func (*ShareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShareRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ShareRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShareRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShareRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ShareRequest) GetShareType() string {
	if m != nil {
		return m.ShareType
	}
	return ""
}

func (m *ShareRequest) GetShareProto() string {
	if m != nil {
		return m.ShareProto
	}
	return ""
}

func (m *ShareRequest) GetAllowDetails() bool {
	if m != nil {
		return m.AllowDetails
	}
	return false
}

func (m *ShareRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ShareRequest) GetMountDir() string {
	if m != nil {
		return m.MountDir
	}
	return ""
}

func (m *ShareRequest) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *ShareRequest) GetDockId() string {
	if m != nil {
		return m.DockId
	}
	return ""
}

func (m *ShareRequest) GetStorageProfile() string {
	if m != nil {
		return m.StorageProfile
	}
	return ""
}

// The Response message containing all properties of
// resource response.
type Response struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*VolumeRequest)(nil), "opensds.VolumeRequest")
	proto.RegisterType((*ShareRequest)(nil), "opensds.ShareRequest")
	proto.RegisterType((*Response)(nil), "opensds.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Orchestration service

type OrchestrationClient interface {
	// Create a volume
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume
	DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a volume attachment
	CreateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Update a volume attachment
	UpdateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a share
	CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a share
	GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// List all shares
	ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a share
	DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Attach a share
	AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Detach a share
	DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
}

type orchestrationClient struct {
	cc *grpc.ClientConn
}

func NewOrchestrationClient(cc *grpc.ClientConn) OrchestrationClient {
	return &orchestrationClient{cc}
}

func (c *orchestrationClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) CreateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/CreateVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) UpdateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/UpdateVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DeleteVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DeleteVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/CreateVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DeleteVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/CreateShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/GetShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/ListShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DeleteShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/AttachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationClient) DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Orchestration/DetachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orchestration service

type OrchestrationServer interface {
	// Create a volume
	CreateVolume(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume
	DeleteVolume(context.Context, *VolumeRequest) (*Response, error)
	// Create a volume attachment
	CreateVolumeAttachment(context.Context, *VolumeRequest) (*Response, error)
	// Update a volume attachment
	UpdateVolumeAttachment(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(context.Context, *VolumeRequest) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Create a share
	CreateShare(context.Context, *ShareRequest) (*Response, error)
	// Get a share
	GetShare(context.Context, *ShareRequest) (*Response, error)
	// List all shares
	ListShares(context.Context, *ShareRequest) (*Response, error)
	// Delete a share
	DeleteShare(context.Context, *ShareRequest) (*Response, error)
	// Attach a share
	AttachShare(context.Context, *ShareRequest) (*Response, error)
	// Detach a share
	DetachShare(context.Context, *ShareRequest) (*Response, error)
}

func RegisterOrchestrationServer(s *grpc.Server, srv OrchestrationServer) {
	s.RegisterService(&_Orchestration_serviceDesc, srv)
}

func _Orchestration_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DeleteVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_CreateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).CreateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/CreateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).CreateVolumeAttachment(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_UpdateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).UpdateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/UpdateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).UpdateVolumeAttachment(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DeleteVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DeleteVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DeleteVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DeleteVolumeAttachment(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_CreateVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).CreateVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/CreateVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).CreateVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DeleteVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DeleteVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DeleteVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DeleteVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).CreateShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).GetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).ListShares(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DeleteShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DeleteShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DeleteShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DeleteShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_AttachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).AttachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/AttachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).AttachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestration_DetachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServer).DetachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Orchestration/DetachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServer).DetachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orchestration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opensds.Orchestration",
	HandlerType: (*OrchestrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Orchestration_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Orchestration_DeleteVolume_Handler,
		},
		{
			MethodName: "CreateVolumeAttachment",
			Handler:    _Orchestration_CreateVolumeAttachment_Handler,
		},
		{
			MethodName: "UpdateVolumeAttachment",
			Handler:    _Orchestration_UpdateVolumeAttachment_Handler,
		},
		{
			MethodName: "DeleteVolumeAttachment",
			Handler:    _Orchestration_DeleteVolumeAttachment_Handler,
		},
		{
			MethodName: "CreateVolumeSnapshot",
			Handler:    _Orchestration_CreateVolumeSnapshot_Handler,
		},
		{
			MethodName: "DeleteVolumeSnapshot",
			Handler:    _Orchestration_DeleteVolumeSnapshot_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _Orchestration_CreateShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _Orchestration_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _Orchestration_ListShares_Handler,
		},
		{
			MethodName: "DeleteShare",
			Handler:    _Orchestration_DeleteShare_Handler,
		},
		{
			MethodName: "AttachShare",
			Handler:    _Orchestration_AttachShare_Handler,
		},
		{
			MethodName: "DetachShare",
			Handler:    _Orchestration_DetachShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opensds.proto",
}

// Client API for Dock service

type DockClient interface {
	// Create a volume
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a volume
	GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume
	DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a volume attachment
	CreateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Update a volume attachment
	UpdateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a volume snapshot
	GetVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error)
	// Create a share
	CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Get a share
	GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// List all shares
	ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Delete a share
	DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Attach a share
	AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
	// Detach a share
	DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error)
}

type dockClient struct {
	cc *grpc.ClientConn
}

func NewDockClient(cc *grpc.ClientConn) DockClient {
	return &dockClient{cc}
}

func (c *dockClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/GetVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) CreateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/CreateVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) UpdateVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/UpdateVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolumeAttachment(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DeleteVolumeAttachment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) CreateVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/CreateVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/GetVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteVolumeSnapshot(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DeleteVolumeSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) CreateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/CreateShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/GetShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) ListShares(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/ListShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DeleteShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) AttachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/AttachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockClient) DetachShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/opensds.Dock/DetachShare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dock service

type DockServer interface {
	// Create a volume
	CreateVolume(context.Context, *VolumeRequest) (*Response, error)
	// Get a volume
	GetVolume(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume
	DeleteVolume(context.Context, *VolumeRequest) (*Response, error)
	// Create a volume attachment
	CreateVolumeAttachment(context.Context, *VolumeRequest) (*Response, error)
	// Update a volume attachment
	UpdateVolumeAttachment(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume attachment
	DeleteVolumeAttachment(context.Context, *VolumeRequest) (*Response, error)
	// Create a volume snapshot
	CreateVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Get a volume snapshot
	GetVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Delete a volume snapshot
	DeleteVolumeSnapshot(context.Context, *VolumeRequest) (*Response, error)
	// Create a share
	CreateShare(context.Context, *ShareRequest) (*Response, error)
	// Get a share
	GetShare(context.Context, *ShareRequest) (*Response, error)
	// List all shares
	ListShares(context.Context, *ShareRequest) (*Response, error)
	// Delete a share
	DeleteShare(context.Context, *ShareRequest) (*Response, error)
	// Attach a share
	AttachShare(context.Context, *ShareRequest) (*Response, error)
	// Detach a share
	DetachShare(context.Context, *ShareRequest) (*Response, error)
}

func RegisterDockServer(s *grpc.Server, srv DockServer) {
	s.RegisterService(&_Dock_serviceDesc, srv)
}

func _Dock_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_CreateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/CreateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolumeAttachment(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_UpdateVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).UpdateVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/UpdateVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).UpdateVolumeAttachment(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolumeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolumeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DeleteVolumeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolumeAttachment(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_CreateVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/CreateVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/GetVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteVolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteVolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DeleteVolumeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteVolumeSnapshot(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/CreateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).CreateShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).GetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/ListShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).ListShares(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DeleteShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DeleteShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DeleteShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DeleteShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_AttachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).AttachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/AttachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).AttachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dock_DetachShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockServer).DetachShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opensds.Dock/DetachShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockServer).DetachShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opensds.Dock",
	HandlerType: (*DockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Dock_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _Dock_GetVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Dock_DeleteVolume_Handler,
		},
		{
			MethodName: "CreateVolumeAttachment",
			Handler:    _Dock_CreateVolumeAttachment_Handler,
		},
		{
			MethodName: "UpdateVolumeAttachment",
			Handler:    _Dock_UpdateVolumeAttachment_Handler,
		},
		{
			MethodName: "DeleteVolumeAttachment",
			Handler:    _Dock_DeleteVolumeAttachment_Handler,
		},
		{
			MethodName: "CreateVolumeSnapshot",
			Handler:    _Dock_CreateVolumeSnapshot_Handler,
		},
		{
			MethodName: "GetVolumeSnapshot",
			Handler:    _Dock_GetVolumeSnapshot_Handler,
		},
		{
			MethodName: "DeleteVolumeSnapshot",
			Handler:    _Dock_DeleteVolumeSnapshot_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _Dock_CreateShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _Dock_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _Dock_ListShares_Handler,
		},
		{
			MethodName: "DeleteShare",
			Handler:    _Dock_DeleteShare_Handler,
		},
		{
			MethodName: "AttachShare",
			Handler:    _Dock_AttachShare_Handler,
		},
		{
			MethodName: "DetachShare",
			Handler:    _Dock_DetachShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opensds.proto",
}

func init() { proto.RegisterFile("opensds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0xb5, 0xed, 0x76, 0x37, 0x7b, 0xbb, 0x5b, 0xe9, 0x58, 0x4b, 0x28, 0x22, 0xb2, 0x88, 0xf8,
	0x54, 0xa4, 0x82, 0x54, 0x7c, 0xb1, 0x74, 0x45, 0x0a, 0x45, 0x4b, 0xaa, 0xbe, 0x8f, 0xc9, 0xad,
	0x09, 0x26, 0x99, 0x38, 0x33, 0xa9, 0xe8, 0x9f, 0xf9, 0x03, 0x7e, 0x83, 0xbf, 0xe1, 0x1f, 0x38,
	0x73, 0x67, 0x92, 0xcd, 0xca, 0xbe, 0xec, 0xea, 0x83, 0x48, 0xdf, 0xe6, 0x9c, 0x99, 0x73, 0xe7,
	0xce, 0x3d, 0x39, 0x10, 0x18, 0x8b, 0x0a, 0x4b, 0x95, 0xa8, 0x83, 0x4a, 0x0a, 0x2d, 0xd8, 0xc0,
	0xc3, 0xc9, 0xcf, 0x0d, 0x18, 0xbf, 0x13, 0x79, 0x5d, 0x60, 0x84, 0x9f, 0x6a, 0x54, 0x9a, 0xed,
	0x43, 0x70, 0x45, 0xc4, 0x69, 0x12, 0xae, 0xdd, 0x5b, 0x7b, 0x38, 0x8c, 0x5a, 0xcc, 0xee, 0x02,
	0xb8, 0xf5, 0x2b, 0x5e, 0x60, 0xb8, 0x4e, 0xbb, 0x1d, 0x86, 0x31, 0xe8, 0xa9, 0xec, 0x2b, 0x86,
	0x1b, 0x66, 0x67, 0x33, 0xa2, 0xb5, 0xad, 0x97, 0x88, 0xf8, 0xe3, 0x69, 0x79, 0x29, 0xc2, 0x9e,
	0xab, 0xd7, 0x60, 0xb6, 0x07, 0xfd, 0x4a, 0x88, 0xdc, 0xdc, 0xb4, 0x49, 0x3b, 0x1e, 0x59, 0x8d,
	0x5d, 0xd1, 0x2d, 0x7d, 0xa7, 0x69, 0x30, 0x9b, 0xc0, 0x88, 0x6b, 0xcd, 0xe3, 0xb4, 0xc0, 0x52,
	0x1b, 0xe5, 0x80, 0xf6, 0xe7, 0x38, 0x76, 0x1f, 0xc6, 0x89, 0x38, 0x13, 0x31, 0xcf, 0x8f, 0x89,
	0x0e, 0x03, 0x73, 0x28, 0x88, 0xe6, 0x49, 0x76, 0x07, 0x86, 0x45, 0x9d, 0xeb, 0xec, 0x9c, 0xeb,
	0x34, 0x1c, 0xd2, 0x89, 0x19, 0x61, 0x7b, 0x48, 0x85, 0xd2, 0xd4, 0x37, 0xb8, 0x1e, 0x1a, 0x6c,
	0xe7, 0x50, 0x88, 0xba, 0xd4, 0x95, 0xc8, 0x4a, 0x1d, 0x6e, 0xb9, 0x39, 0xcc, 0x18, 0xbb, 0xaf,
	0x4a, 0x5e, 0xa9, 0x54, 0xd8, 0x0e, 0x47, 0x6e, 0x7f, 0xc6, 0xd8, 0x37, 0x34, 0x88, 0xde, 0x38,
	0x76, 0x6f, 0xe8, 0x72, 0xec, 0x11, 0xdc, 0x6a, 0xf0, 0x14, 0x55, 0x2c, 0xb3, 0x4a, 0x67, 0xa2,
	0x0c, 0xb7, 0xe9, 0xe8, 0xa2, 0x2d, 0xf6, 0x00, 0xb6, 0x95, 0x16, 0x92, 0x7f, 0xc0, 0x73, 0x29,
	0x2e, 0xb3, 0x1c, 0xc3, 0x9b, 0x74, 0xf8, 0x37, 0x76, 0xf2, 0x63, 0x1d, 0x46, 0x17, 0x29, 0x97,
	0xad, 0xe5, 0xa6, 0x1d, 0x89, 0x4a, 0xd4, 0x32, 0xc6, 0x37, 0x5f, 0x2a, 0xf4, 0xb6, 0xcf, 0x71,
	0x6c, 0x1b, 0xd6, 0xb3, 0xc4, 0x5b, 0x6e, 0x56, 0xd6, 0xea, 0xd2, 0xb6, 0xbe, 0x41, 0x0c, 0xad,
	0x5b, 0xfb, 0x7b, 0x1d, 0xfb, 0xcd, 0x90, 0x95, 0xbd, 0x8b, 0x0a, 0x3b, 0x97, 0x67, 0x04, 0x0d,
	0xca, 0x82, 0x73, 0xfb, 0x55, 0x7a, 0xab, 0x3b, 0x0c, 0x99, 0x9d, 0xe7, 0xe2, 0xf3, 0x14, 0x35,
	0xcf, 0x72, 0x45, 0x66, 0x07, 0xd1, 0x1c, 0x67, 0x3f, 0xa2, 0x04, 0xaf, 0xb2, 0x18, 0xc9, 0x65,
	0xf3, 0x11, 0x39, 0x64, 0x0d, 0x24, 0x4b, 0xa6, 0x99, 0x24, 0x77, 0x8d, 0x81, 0x0d, 0xb6, 0x9a,
	0x4b, 0x45, 0x2d, 0x39, 0x6b, 0x3d, 0xa2, 0x5a, 0xf6, 0xe3, 0x4c, 0xbc, 0xa9, 0x1e, 0x2d, 0x18,
	0xed, 0x68, 0xe1, 0x68, 0x23, 0x08, 0x22, 0x54, 0x95, 0x28, 0x15, 0xd5, 0x52, 0x9a, 0xeb, 0x5a,
	0xf9, 0x79, 0x7a, 0xc4, 0x42, 0x18, 0x14, 0xa8, 0x94, 0x51, 0xf9, 0x71, 0x36, 0x90, 0xed, 0xc2,
	0x26, 0x4a, 0x29, 0xa4, 0x1f, 0xaa, 0x03, 0x87, 0xdf, 0xfb, 0x30, 0x7e, 0x2d, 0xe3, 0xd4, 0x38,
	0x25, 0x39, 0x19, 0xfd, 0x0c, 0x46, 0x27, 0x12, 0xb9, 0x46, 0x97, 0x5c, 0xb6, 0x77, 0xd0, 0xa4,
	0x7b, 0x2e, 0xca, 0xfb, 0x3b, 0x2d, 0xdf, 0x34, 0x35, 0xb9, 0x61, 0xc5, 0x53, 0xcc, 0x71, 0x35,
	0xf1, 0x0b, 0xd8, 0xeb, 0xde, 0x7c, 0xdc, 0x86, 0x6e, 0xe9, 0x32, 0x6f, 0xab, 0xe4, 0x6f, 0x94,
	0xe9, 0x3e, 0x65, 0xd5, 0x32, 0x27, 0xb0, 0xdb, 0x7d, 0xd4, 0x85, 0x8f, 0xd6, 0xd2, 0x45, 0xba,
	0xbd, 0xac, 0x56, 0xe4, 0x29, 0x6c, 0xb9, 0x4e, 0x28, 0x9e, 0xec, 0x76, 0x7b, 0xa6, 0x1b, 0xd7,
	0xc5, 0xd2, 0x27, 0x10, 0xbc, 0x44, 0xbd, 0xbc, 0xee, 0x08, 0xe0, 0x2c, 0x53, 0x4e, 0xa8, 0x96,
	0x52, 0x9a, 0x66, 0xdd, 0x8b, 0x97, 0xbf, 0xd4, 0x48, 0x9d, 0x59, 0x2b, 0x49, 0x6d, 0xf0, 0x57,
	0x90, 0x1e, 0x7e, 0x1b, 0x40, 0x6f, 0x6a, 0xf2, 0xfc, 0x67, 0xf9, 0x39, 0x82, 0xa1, 0x19, 0xf4,
	0x75, 0xf2, 0xfe, 0x99, 0xe4, 0x3d, 0x87, 0x9d, 0xd6, 0x90, 0xeb, 0xec, 0xfe, 0x9f, 0xd9, 0x7d,
	0xdf, 0xa7, 0xff, 0xd6, 0xc7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xc4, 0x0b, 0x2e, 0xc8,
	0x0a, 0x00, 0x00,
}
