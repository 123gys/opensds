package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteShareHandlerFunc turns a function with the right signature into a delete share handler
type DeleteShareHandlerFunc func(DeleteShareParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteShareHandlerFunc) Handle(params DeleteShareParams) middleware.Responder {
	return fn(params)
}

// DeleteShareHandler interface for that can handle valid delete share params
type DeleteShareHandler interface {
	Handle(DeleteShareParams) middleware.Responder
}

// NewDeleteShare creates a new http.Handler for the delete share operation
func NewDeleteShare(ctx *middleware.Context, handler DeleteShareHandler) *DeleteShare {
	return &DeleteShare{Context: ctx, Handler: handler}
}

/*DeleteShare swagger:route DELETE /api/v1/shares/{resourceType}/{id} deleteShare

delete specified share in specified backend resource

*/
type DeleteShare struct {
	Context *middleware.Context
	Handler DeleteShareHandler
}

func (o *DeleteShare) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteShareParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
