package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateShareHandlerFunc turns a function with the right signature into a update share handler
type UpdateShareHandlerFunc func(UpdateShareParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateShareHandlerFunc) Handle(params UpdateShareParams) middleware.Responder {
	return fn(params)
}

// UpdateShareHandler interface for that can handle valid update share params
type UpdateShareHandler interface {
	Handle(UpdateShareParams) middleware.Responder
}

// NewUpdateShare creates a new http.Handler for the update share operation
func NewUpdateShare(ctx *middleware.Context, handler UpdateShareHandler) *UpdateShare {
	return &UpdateShare{Context: ctx, Handler: handler}
}

/*UpdateShare swagger:route PUT /api/v1/shares/{resourceType}/{id} updateShare

update specified share in specified backend resource

*/
type UpdateShare struct {
	Context *middleware.Context
	Handler UpdateShareHandler
}

func (o *UpdateShare) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUpdateShareParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
