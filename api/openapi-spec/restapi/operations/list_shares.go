package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListSharesHandlerFunc turns a function with the right signature into a list shares handler
type ListSharesHandlerFunc func(ListSharesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListSharesHandlerFunc) Handle(params ListSharesParams) middleware.Responder {
	return fn(params)
}

// ListSharesHandler interface for that can handle valid list shares params
type ListSharesHandler interface {
	Handle(ListSharesParams) middleware.Responder
}

// NewListShares creates a new http.Handler for the list shares operation
func NewListShares(ctx *middleware.Context, handler ListSharesHandler) *ListShares {
	return &ListShares{Context: ctx, Handler: handler}
}

/*ListShares swagger:route GET /api/v1/shares/{resourceType} listShares

list shares in specified backend resource

*/
type ListShares struct {
	Context *middleware.Context
	Handler ListSharesHandler
}

func (o *ListShares) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewListSharesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
