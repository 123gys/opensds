package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetShareHandlerFunc turns a function with the right signature into a get share handler
type GetShareHandlerFunc func(GetShareParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetShareHandlerFunc) Handle(params GetShareParams) middleware.Responder {
	return fn(params)
}

// GetShareHandler interface for that can handle valid get share params
type GetShareHandler interface {
	Handle(GetShareParams) middleware.Responder
}

// NewGetShare creates a new http.Handler for the get share operation
func NewGetShare(ctx *middleware.Context, handler GetShareHandler) *GetShare {
	return &GetShare{Context: ctx, Handler: handler}
}

/*GetShare swagger:route GET /api/v1/shares/{resourceType}/{id} getShare

get specified share in specified backend resource

*/
type GetShare struct {
	Context *middleware.Context
	Handler GetShareHandler
}

func (o *GetShare) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetShareParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
