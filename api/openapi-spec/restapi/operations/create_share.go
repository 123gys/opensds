package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateShareHandlerFunc turns a function with the right signature into a create share handler
type CreateShareHandlerFunc func(CreateShareParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateShareHandlerFunc) Handle(params CreateShareParams) middleware.Responder {
	return fn(params)
}

// CreateShareHandler interface for that can handle valid create share params
type CreateShareHandler interface {
	Handle(CreateShareParams) middleware.Responder
}

// NewCreateShare creates a new http.Handler for the create share operation
func NewCreateShare(ctx *middleware.Context, handler CreateShareHandler) *CreateShare {
	return &CreateShare{Context: ctx, Handler: handler}
}

/*CreateShare swagger:route POST /api/v1/shares/{resourceType} createShare

create a share in specified backend resource

*/
type CreateShare struct {
	Context *middleware.Context
	Handler CreateShareHandler
}

func (o *CreateShare) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateShareParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
