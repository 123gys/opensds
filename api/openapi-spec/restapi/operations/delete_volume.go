package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteVolumeHandlerFunc turns a function with the right signature into a delete volume handler
type DeleteVolumeHandlerFunc func(DeleteVolumeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteVolumeHandlerFunc) Handle(params DeleteVolumeParams) middleware.Responder {
	return fn(params)
}

// DeleteVolumeHandler interface for that can handle valid delete volume params
type DeleteVolumeHandler interface {
	Handle(DeleteVolumeParams) middleware.Responder
}

// NewDeleteVolume creates a new http.Handler for the delete volume operation
func NewDeleteVolume(ctx *middleware.Context, handler DeleteVolumeHandler) *DeleteVolume {
	return &DeleteVolume{Context: ctx, Handler: handler}
}

/*DeleteVolume swagger:route DELETE /api/v1/volumes/{resourceType}/{id} deleteVolume

delete specified volume in specified backend resource

*/
type DeleteVolume struct {
	Context *middleware.Context
	Handler DeleteVolumeHandler
}

func (o *DeleteVolume) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteVolumeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
