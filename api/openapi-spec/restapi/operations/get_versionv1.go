package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetVersionv1HandlerFunc turns a function with the right signature into a get versionv1 handler
type GetVersionv1HandlerFunc func(GetVersionv1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVersionv1HandlerFunc) Handle(params GetVersionv1Params) middleware.Responder {
	return fn(params)
}

// GetVersionv1Handler interface for that can handle valid get versionv1 params
type GetVersionv1Handler interface {
	Handle(GetVersionv1Params) middleware.Responder
}

// NewGetVersionv1 creates a new http.Handler for the get versionv1 operation
func NewGetVersionv1(ctx *middleware.Context, handler GetVersionv1Handler) *GetVersionv1 {
	return &GetVersionv1{Context: ctx, Handler: handler}
}

/*GetVersionv1 swagger:route GET /api/v1 getVersionv1

show API version

*/
type GetVersionv1 struct {
	Context *middleware.Context
	Handler GetVersionv1Handler
}

func (o *GetVersionv1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetVersionv1Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
