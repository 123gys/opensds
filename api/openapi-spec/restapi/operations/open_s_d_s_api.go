package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewOpenSDSAPI creates a new OpenSDS instance
func NewOpenSDSAPI(spec *loads.Document) *OpenSDSAPI {
	return &OpenSDSAPI{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
		ServeError:      errors.ServeError,
		JSONConsumer:    runtime.JSONConsumer(),
		JSONProducer:    runtime.JSONProducer(),
		CreateShareHandler: CreateShareHandlerFunc(func(params CreateShareParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateShare has not yet been implemented")
		}),
		CreateVolumeHandler: CreateVolumeHandlerFunc(func(params CreateVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateVolume has not yet been implemented")
		}),
		DeleteShareHandler: DeleteShareHandlerFunc(func(params DeleteShareParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteShare has not yet been implemented")
		}),
		DeleteVolumeHandler: DeleteVolumeHandlerFunc(func(params DeleteVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteVolume has not yet been implemented")
		}),
		GetShareHandler: GetShareHandlerFunc(func(params GetShareParams) middleware.Responder {
			return middleware.NotImplemented("operation GetShare has not yet been implemented")
		}),
		GetVersionv1Handler: GetVersionv1HandlerFunc(func(params GetVersionv1Params) middleware.Responder {
			return middleware.NotImplemented("operation GetVersionv1 has not yet been implemented")
		}),
		GetVolumeHandler: GetVolumeHandlerFunc(func(params GetVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetVolume has not yet been implemented")
		}),
		ListShareResourcesHandler: ListShareResourcesHandlerFunc(func(params ListShareResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation ListShareResources has not yet been implemented")
		}),
		ListSharesHandler: ListSharesHandlerFunc(func(params ListSharesParams) middleware.Responder {
			return middleware.NotImplemented("operation ListShares has not yet been implemented")
		}),
		ListVersionsHandler: ListVersionsHandlerFunc(func(params ListVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation ListVersions has not yet been implemented")
		}),
		ListVolumeResourcesHandler: ListVolumeResourcesHandlerFunc(func(params ListVolumeResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation ListVolumeResources has not yet been implemented")
		}),
		ListVolumesHandler: ListVolumesHandlerFunc(func(params ListVolumesParams) middleware.Responder {
			return middleware.NotImplemented("operation ListVolumes has not yet been implemented")
		}),
		OperateVolumeHandler: OperateVolumeHandlerFunc(func(params OperateVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation OperateVolume has not yet been implemented")
		}),
		UpdateShareHandler: UpdateShareHandlerFunc(func(params UpdateShareParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateShare has not yet been implemented")
		}),
		UpdateVolumeHandler: UpdateVolumeHandlerFunc(func(params UpdateVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateVolume has not yet been implemented")
		}),
	}
}

/*OpenSDSAPI the open s d s API */
type OpenSDSAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// CreateShareHandler sets the operation handler for the create share operation
	CreateShareHandler CreateShareHandler
	// CreateVolumeHandler sets the operation handler for the create volume operation
	CreateVolumeHandler CreateVolumeHandler
	// DeleteShareHandler sets the operation handler for the delete share operation
	DeleteShareHandler DeleteShareHandler
	// DeleteVolumeHandler sets the operation handler for the delete volume operation
	DeleteVolumeHandler DeleteVolumeHandler
	// GetShareHandler sets the operation handler for the get share operation
	GetShareHandler GetShareHandler
	// GetVersionv1Handler sets the operation handler for the get versionv1 operation
	GetVersionv1Handler GetVersionv1Handler
	// GetVolumeHandler sets the operation handler for the get volume operation
	GetVolumeHandler GetVolumeHandler
	// ListShareResourcesHandler sets the operation handler for the list share resources operation
	ListShareResourcesHandler ListShareResourcesHandler
	// ListSharesHandler sets the operation handler for the list shares operation
	ListSharesHandler ListSharesHandler
	// ListVersionsHandler sets the operation handler for the list versions operation
	ListVersionsHandler ListVersionsHandler
	// ListVolumeResourcesHandler sets the operation handler for the list volume resources operation
	ListVolumeResourcesHandler ListVolumeResourcesHandler
	// ListVolumesHandler sets the operation handler for the list volumes operation
	ListVolumesHandler ListVolumesHandler
	// OperateVolumeHandler sets the operation handler for the operate volume operation
	OperateVolumeHandler OperateVolumeHandler
	// UpdateShareHandler sets the operation handler for the update share operation
	UpdateShareHandler UpdateShareHandler
	// UpdateVolumeHandler sets the operation handler for the update volume operation
	UpdateVolumeHandler UpdateVolumeHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *OpenSDSAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *OpenSDSAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *OpenSDSAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *OpenSDSAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *OpenSDSAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *OpenSDSAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *OpenSDSAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the OpenSDSAPI
func (o *OpenSDSAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CreateShareHandler == nil {
		unregistered = append(unregistered, "CreateShareHandler")
	}

	if o.CreateVolumeHandler == nil {
		unregistered = append(unregistered, "CreateVolumeHandler")
	}

	if o.DeleteShareHandler == nil {
		unregistered = append(unregistered, "DeleteShareHandler")
	}

	if o.DeleteVolumeHandler == nil {
		unregistered = append(unregistered, "DeleteVolumeHandler")
	}

	if o.GetShareHandler == nil {
		unregistered = append(unregistered, "GetShareHandler")
	}

	if o.GetVersionv1Handler == nil {
		unregistered = append(unregistered, "GetVersionv1Handler")
	}

	if o.GetVolumeHandler == nil {
		unregistered = append(unregistered, "GetVolumeHandler")
	}

	if o.ListShareResourcesHandler == nil {
		unregistered = append(unregistered, "ListShareResourcesHandler")
	}

	if o.ListSharesHandler == nil {
		unregistered = append(unregistered, "ListSharesHandler")
	}

	if o.ListVersionsHandler == nil {
		unregistered = append(unregistered, "ListVersionsHandler")
	}

	if o.ListVolumeResourcesHandler == nil {
		unregistered = append(unregistered, "ListVolumeResourcesHandler")
	}

	if o.ListVolumesHandler == nil {
		unregistered = append(unregistered, "ListVolumesHandler")
	}

	if o.OperateVolumeHandler == nil {
		unregistered = append(unregistered, "OperateVolumeHandler")
	}

	if o.UpdateShareHandler == nil {
		unregistered = append(unregistered, "UpdateShareHandler")
	}

	if o.UpdateVolumeHandler == nil {
		unregistered = append(unregistered, "UpdateVolumeHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *OpenSDSAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *OpenSDSAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *OpenSDSAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *OpenSDSAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *OpenSDSAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the open s d s API
func (o *OpenSDSAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *OpenSDSAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/shares/{resourceType}"] = NewCreateShare(o.context, o.CreateShareHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/volumes/{resourceType}"] = NewCreateVolume(o.context, o.CreateVolumeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/shares/{resourceType}/{id}"] = NewDeleteShare(o.context, o.DeleteShareHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/volumes/{resourceType}/{id}"] = NewDeleteVolume(o.context, o.DeleteVolumeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/shares/{resourceType}/{id}"] = NewGetShare(o.context, o.GetShareHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1"] = NewGetVersionv1(o.context, o.GetVersionv1Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/volumes/{resourceType}/{id}"] = NewGetVolume(o.context, o.GetVolumeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/shares"] = NewListShareResources(o.context, o.ListShareResourcesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/shares/{resourceType}"] = NewListShares(o.context, o.ListSharesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api"] = NewListVersions(o.context, o.ListVersionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/volumes"] = NewListVolumeResources(o.context, o.ListVolumeResourcesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/volumes/{resourceType}"] = NewListVolumes(o.context, o.ListVolumesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/volumes/action/{resourceType}/{id}"] = NewOperateVolume(o.context, o.OperateVolumeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/shares/{resourceType}/{id}"] = NewUpdateShare(o.context, o.UpdateShareHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/volumes/{resourceType}/{id}"] = NewUpdateVolume(o.context, o.UpdateVolumeHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *OpenSDSAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *OpenSDSAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
